/*!
 * key-mapper.js 0.0.1
 * https://github.com/Tom32i/key-mapper.js
 * Copyright 2014 Thomas JARRAND
 */

function EventEmitter(){this._eventElement=document.createElement("div")}function OptionResolver(t){this.allowExtra="undefined"!=typeof t&&t,this.defaults={},this.types={},this.optional=[],this.required=[]}function EventEmitter(){this._eventElement=document.createElement("div")}function OptionResolver(t){this.allowExtra="undefined"!=typeof t&&t,this.defaults={},this.types={},this.optional=[],this.required=[]}function GamepadHandler(t,e){EventEmitter.call(this),this.gamepad=t,this.sticks=new Array(this.gamepad.axes.length),this.buttons=new Array(this.gamepad.buttons.length),this.options=this.resolveOptions(e);for(var n=this.sticks.length-1;n>=0;n--)this.sticks[n]=[0,0];for(var i=this.buttons.length-1;i>=0;i--)this.buttons[i]=0;this.gamepad.handler=this}function GamepadListener(t){EventEmitter.call(this),this.options="object"==typeof t?t:{},this.frame=null,this.update=this.update.bind(this),this.onAxis=this.onAxis.bind(this),this.onButton=this.onButton.bind(this),this.stop=this.stop.bind(this),window.addEventListener("error",this.stop),this.start()}function InputListener(t,e){EventEmitter.call(this),this.mapper=t,this.element="string"==typeof e?document.getElementById(e):e,this.onMapperListening=this.onMapperListening.bind(this),this.onMapperChange=this.onMapperChange.bind(this),this.element.addEventListener("focus",t.start),this.element.addEventListener("blur",t.stop),t instanceof KeyboardMapper||(this.element.addEventListener("keyup",t.kill),this.element.addEventListener("keydown",t.kill),this.element.addEventListener("keypress",t.kill)),this.mapper.on("listening:start",this.onMapperListening),this.mapper.on("listening:stop",this.onMapperChange),this.mapper.on("change",this.onMapperChange)}function Mapper(){EventEmitter.call(this),this.value=null,this.view=null,this.listening=!1,this.start=this.start.bind(this),this.stop=this.stop.bind(this)}function KeyboardMapper(){Mapper.call(this),this.onKey=this.onKey.bind(this)}function GamepadMapper(t){Mapper.call(this),this.gamepadListener=t,this.onAxis=this.onAxis.bind(this),this.onButton=this.onButton.bind(this)}EventEmitter.prototype.emit=function(t,e){this._eventElement.dispatchEvent(new CustomEvent(t,{detail:e}))},EventEmitter.prototype.addEventListener=function(t,e){this._eventElement.addEventListener(t,e,!1)},EventEmitter.prototype.removeEventListener=function(t,e){this._eventElement.removeEventListener(t,e,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addEventListener,EventEmitter.prototype.off=EventEmitter.prototype.removeEventListener,OptionResolver.prototype.setDefaults=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.defaults[e]=t[e]);return this},OptionResolver.prototype.setTypes=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.types[e]=t[e]);return this},OptionResolver.prototype.setOptional=function(t){return this.allowExtra?void 0:(this.addToArray(this.optionals,t),this)},OptionResolver.prototype.setRequired=function(t){return this.addToArray(this.required,t),this},OptionResolver.prototype.resolve=function(t){var e={};for(var n in this.defaults)this.defaults.hasOwnProperty(n)&&(e[n]=this.getValue(t,n));for(var i=this.required.length-1;i>=0;i--)if(n=this.required[i],"undefined"==typeof e[n])throw'Option "'+n+'" is required.';return e},OptionResolver.prototype.getValue=function(t,e){var n=null;if(!this.optionExists(e))throw'Unkown option "'+e+'".';return"undefined"!=typeof t[e]?n=t[e]:"undefined"!=typeof this.defaults[e]&&(n=this.defaults[e]),this.checkType(e,n),n},OptionResolver.prototype.checkType=function(t,e){var n="undefined"!=typeof this.types[t]?this.types[t]:!1,i=typeof e;if(n&&i!==n&&("string"===n&&(e=String(e)),"boolean"===n&&(e=Boolean(e)),"number"===n&&(e=Number(e)),i=typeof e,n!==i))throw'Wrong type for option "'+t+'". Expected '+this.types[t]+" but got "+typeof e},OptionResolver.prototype.optionExists=function(t){return this.allowExtra?!0:"undefined"!=typeof this.defaults[t]||this.optional.indexOf(t)>=0||this.required.indexOf(t)>=0},OptionResolver.prototype.addToArray=function(t,e){for(var n,i=e.length-1;i>=0;i--)n=e[i],t.indexOf(n)>=0&&t.push(n)},EventEmitter.prototype.emit=function(t,e){this._eventElement.dispatchEvent(new CustomEvent(t,{detail:e}))},EventEmitter.prototype.addEventListener=function(t,e){this._eventElement.addEventListener(t,e,!1)},EventEmitter.prototype.removeEventListener=function(t,e){this._eventElement.removeEventListener(t,e,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addEventListener,EventEmitter.prototype.off=EventEmitter.prototype.removeEventListener,OptionResolver.prototype.setDefaults=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.defaults[e]=t[e]);return this},OptionResolver.prototype.setTypes=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.types[e]=t[e]);return this},OptionResolver.prototype.setOptional=function(t){return this.allowExtra?void 0:(this.addToArray(this.optionals,t),this)},OptionResolver.prototype.setRequired=function(t){return this.addToArray(this.required,t),this},OptionResolver.prototype.resolve=function(t){var e={};for(var n in this.defaults)this.defaults.hasOwnProperty(n)&&(e[n]=this.getValue(t,n));for(var i=this.required.length-1;i>=0;i--)if(n=this.required[i],"undefined"==typeof e[n])throw'Option "'+n+'" is required.';return e},OptionResolver.prototype.getValue=function(t,e){var n=null;if(!this.optionExists(e))throw'Unkown option "'+e+'".';return"undefined"!=typeof t[e]?n=t[e]:"undefined"!=typeof this.defaults[e]&&(n=this.defaults[e]),this.checkType(e,n),n},OptionResolver.prototype.checkType=function(t,e){var n="undefined"!=typeof this.types[t]?this.types[t]:!1,i=typeof e;if(n&&i!==n&&("string"===n&&(e=String(e)),"boolean"===n&&(e=Boolean(e)),"number"===n&&(e=Number(e)),i=typeof e,n!==i))throw'Wrong type for option "'+t+'". Expected '+this.types[t]+" but got "+typeof e},OptionResolver.prototype.optionExists=function(t){return this.allowExtra?!0:"undefined"!=typeof this.defaults[t]||this.optional.indexOf(t)>=0||this.required.indexOf(t)>=0},OptionResolver.prototype.addToArray=function(t,e){for(var n,i=e.length-1;i>=0;i--)n=e[i],t.indexOf(n)>=0&&t.push(n)},GamepadHandler.prototype=Object.create(EventEmitter.prototype),GamepadHandler.prototype.constructor=GamepadHandler,GamepadHandler.prototype.optionResolver=new OptionResolver(!1),GamepadHandler.prototype.optionResolver.setDefaults({analog:!0,deadZone:0,precision:0}),GamepadHandler.prototype.optionResolver.setTypes({analog:"boolean",deadZone:"number",precision:"number"}),GamepadHandler.prototype.resolveOptions=function(t){var e="undefined"!=typeof t.stick,n="undefined"!=typeof t.button,i={stick:this.optionResolver.resolve(e?t.stick:n?{}:t),button:this.optionResolver.resolve(n?t.button:e?{}:t)};return i.stick.deadZone=Math.max(Math.min(i.stick.deadZone,1),0),i.button.deadZone=Math.max(Math.min(i.button.deadZone,1),0),i.stick.precision=i.stick.precision?Math.pow(10,i.stick.precision):0,i.button.precision=i.button.precision?Math.pow(10,i.button.precision):0,i},GamepadHandler.prototype.update=function(){var t=0,e=0,n=0;for(e=0;2>e;e++)for(n=0;2>n;n++)this.setStick(e,n,this.gamepad.axes[t],this.options.stick),t++;for(t=this.gamepad.buttons.length-1;t>=0;t--)this.setButton(t,this.gamepad.buttons[t],this.options.button)},GamepadHandler.prototype.setStick=function(t,e,n,i){i.deadZone&&n<i.deadZone&&n>-i.deadZone&&(n=0),i.analog?i.precision&&(n=Math.round(n*i.precision)/i.precision):n=n>0?1:0>n?-1:0,this.sticks[t][e]!==n&&(this.sticks[t][e]=n,this.emit("gamepad:axis",{gamepad:this.gamepad,axis:e,value:this.sticks[t][e]}))},GamepadHandler.prototype.setButton=function(t,e,n){var i=e.value;n.deadZone&&e.value<n.deadZone&&e.value>-n.deadZone&&(i=0),n.analog?n.precision&&(i=Math.round(i*n.precision)/n.precision):i=e.pressed?1:0,this.buttons[t]!==i&&(this.buttons[t]=i,this.emit("gamepad:button",{gamepad:this.gamepad,button:e,index:t,pressed:e.pressed,value:i}))},GamepadListener.prototype=Object.create(EventEmitter.prototype),GamepadListener.prototype.constructor=GamepadListener,GamepadListener.prototype.start=function(){this.frame||this.update()},GamepadListener.prototype.stop=function(){this.frame&&(window.cancelAnimationFrame(this.frame),this.frame=null)},GamepadListener.prototype.update=function(){this.frame=window.requestAnimationFrame(this.update);for(var t=this.getGamepads(),e=t.length-1;e>=0;e--)t[e]&&("undefined"==typeof t[e].handler&&this.addGamepad(t[e]),t[e].handler.update())},GamepadListener.prototype.addGamepad=function(t){var e=new GamepadHandler(t,this.options);e.on("gamepad:axis",this.onAxis),e.on("gamepad:button",this.onButton),this.emit("gamepad:connected",{gamepad:t,index:t.index})},GamepadListener.prototype.onAxis=function(t){this.emit("gamepad:axis",t.detail)},GamepadListener.prototype.onButton=function(t){this.emit("gamepad:button",t.detail)},GamepadListener.prototype.getGamepads=function(){return"undefined"!=typeof navigator.getGamepads?navigator.getGamepads():"undefined"!=typeof navigator.webkitGetGamepads?navigator.webkitGetGamepads():null},InputListener.prototype=Object.create(EventEmitter.prototype),InputListener.prototype.onMapperListening=function(){this.element.value="",this.element.placeholder="..."},InputListener.prototype.onMapperChange=function(){this.element.value=this.mapper.view,this.element.placeholder=null,this.element.blur()},Mapper.prototype=Object.create(EventEmitter.prototype),Mapper.prototype.setValue=function(t){this.value!==t&&(this.value=t,this.view=this.guessChar(this.value),this.emit("change",{value:this.value,view:this.view}))},Mapper.prototype.start=function(){return this.listening?!1:(this.listening=!0,this.emit("listening:start"),!0)},Mapper.prototype.stop=function(){return this.listening?(this.listening=!1,this.emit("listening:stop"),!0):!1},Mapper.prototype.kill=function(t){return t.preventDefault(),!1},Mapper.prototype.guessChar=function(t){return t.toString()},KeyboardMapper.prototype=Object.create(Mapper.prototype),KeyboardMapper.prototype.start=function(){Mapper.prototype.start.call(this)&&(window.addEventListener("keydown",this.onKey),window.addEventListener("keypress",this.kill))},KeyboardMapper.prototype.stop=function(){Mapper.prototype.stop.call(this)&&(window.removeEventListener("keydown",this.onKey),window.removeEventListener("keypress",this.kill))},KeyboardMapper.prototype.onKey=function(t){return t.preventDefault(),this.stop(),this.setValue(t.keyCode),!1},KeyboardMapper.prototype.guessChar=function(t){switch(t=t.toString()){case"8":return"Backspace";case"13":return"Enter";case"16":return"Maj";case"17":return"Ctrl";case"18":return"Alt";case"32":return"Space";case"38":return"↑";case"40":return"↓";case"39":return"→";case"37":return"←";default:return String.fromCharCode(t)}},GamepadMapper.prototype=Object.create(Mapper.prototype),GamepadMapper.prototype.sticks={0:{"-1":"←",1:"→",0:"idle"},1:{"-1":"↑",1:"↓",0:"idle"}},GamepadMapper.prototype.start=function(){Mapper.prototype.start.call(this)&&(this.gamepadListener.on("gamepad:axis",this.onAxis),this.gamepadListener.on("gamepad:button",this.onButton))},GamepadMapper.prototype.stop=function(){Mapper.prototype.stop.call(this)&&(this.gamepadListener.off("gamepad:axis",this.onAxis),this.gamepadListener.off("gamepad:button",this.onButton))},GamepadMapper.prototype.onAxis=function(t){this.stop();var e=t.detail.value>0?1:t.detail.value<0?-1:0;this.setValue("axis:"+t.detail.axis+":"+e)},GamepadMapper.prototype.onButton=function(t){this.stop(),this.setValue("button:"+t.detail.index)},GamepadMapper.prototype.guessChar=function(t){var e=new RegExp("axis:(\\d+):(-?\\d+)","gi").exec(t),n=new RegExp("button:(\\d+)","gi").exec(t);return e?"Stick "+this.sticks[e[1]][e[2]]:n?"Button ("+n[1]+")":t};